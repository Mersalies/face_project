import torch
import torch.nn.functional as F
import os
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
from model import Face_model
from sklearn.metrics import roc_curve, auc
import matplotlib.pyplot as plt
import numpy as np
from tqdm import tqdm
import time

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
VAL_DIR = 'processed_dataset/val'
MODEL_PATH = 'face_model.pth'
BATCH_SIZE = 32
DEVICE = torch.device("cuda" if torch.cuda.is_available() else "cpu")
EMBEDDING_SIZE = 128

# === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–µ–º–ø–ª–∏—Ä–æ–≤–∞–Ω–∏—è ===
MAX_ROC_PAIRS = 15_000_000

# === –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ ===
transform = transforms.Compose([
    transforms.Resize((160, 160)),
    transforms.ToTensor(),
    transforms.Normalize([0.5], [0.5])
])

# === –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ ===
print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∏–∑: {VAL_DIR}")
val_dataset = datasets.ImageFolder(VAL_DIR, transform=transform)
val_loader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False)
print(f"–î–∞—Ç–∞—Å–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(val_dataset)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ {len(val_loader)} –±–∞—Ç—á–∞—Ö.")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ===
print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏–∑: {MODEL_PATH} –Ω–∞ {DEVICE}...")
model = Face_model(embedding_size=EMBEDDING_SIZE).to(DEVICE)
model.load_state_dict(torch.load(MODEL_PATH, map_location=DEVICE))
model.eval()
print("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

# === –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ ===
print("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
start_time_embedding = time.time()
embeddings = []
labels = []

with torch.no_grad():
    for imgs, lbls in tqdm(val_loader, desc="–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"):
        imgs = imgs.to(DEVICE)
        embs = model(imgs)
        embeddings.append(embs.cpu())
        labels.append(lbls)

embeddings = torch.cat(embeddings)
labels = torch.cat(labels)
end_time_embedding = time.time()
print(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {embeddings.shape[0]} —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∑–∞ {end_time_embedding - start_time_embedding:.2f} —Å–µ–∫—É–Ω–¥.")

# === –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π (—Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ —á–∞–Ω–∫–∏) ===
def calculate_all_pairwise_distances_and_labels_chunked(embs, lbls, distance_type='cosine', chunk_size=1024):
    N = embs.size(0)
    print(f"–ù–∞—á–∞–ª–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è {N*(N-1)//2} –ø–æ–ø–∞—Ä–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —á–∞–Ω–∫–æ–≤ –ø–æ {chunk_size}...")

    all_distances_list = []
    all_pair_labels_list = []

    if distance_type == 'cosine':
        embs = F.normalize(embs, p=2, dim=1)

    for i in tqdm(range(0, N, chunk_size), desc="–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–ø–∞—Ä–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π"):
        chunk_embs = embs[i:min(i + chunk_size, N)].to(DEVICE)
        
        if distance_type == 'cosine':
            similarity_chunk = torch.matmul(chunk_embs, embs.transpose(0, 1).to(DEVICE))
            distance_chunk = 1 - similarity_chunk
        elif distance_type == 'euclidean':
            distance_chunk = torch.cdist(chunk_embs, embs.to(DEVICE), p=2)
        else:
            raise ValueError("Unknown distance type. Choose 'cosine' or 'euclidean'.")

        for idx_in_chunk in range(chunk_embs.size(0)):
            current_global_idx = i + idx_in_chunk
            
            dists_from_current = distance_chunk[idx_in_chunk, current_global_idx + 1:]
            labels_from_current = (lbls[current_global_idx] == lbls[current_global_idx + 1:])

            all_distances_list.append(dists_from_current.cpu())
            all_pair_labels_list.append(labels_from_current.cpu())
        
        del chunk_embs
        if distance_type == 'cosine':
            del similarity_chunk
        else:
            del distance_chunk
        torch.cuda.empty_cache()

    all_distances_np = torch.cat(all_distances_list).numpy()
    all_pair_labels_np = torch.cat(all_pair_labels_list).numpy()
    
    print("–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–ø–∞—Ä–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    return all_distances_np, all_pair_labels_np


# === –†–∞—Å—á—ë—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π ===
start_time_distances = time.time()
all_distances_raw, true_labels_raw = calculate_all_pairwise_distances_and_labels_chunked(embeddings, labels, distance_type='cosine', chunk_size=1024)
end_time_distances = time.time()
print(f"–ü–æ–ø–∞—Ä–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤—ã—á–∏—Å–ª–µ–Ω—ã –∑–∞ {end_time_distances - start_time_distances:.2f} —Å–µ–∫—É–Ω–¥.")

# === –°–µ–º–ø–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è ROC-–∫—Ä–∏–≤–æ–π –∏ –º–µ—Ç—Ä–∏–∫ ===
print(f"\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä: {len(all_distances_raw)}. –°–µ–º–ø–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ {MAX_ROC_PAIRS} –ø–∞—Ä –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º–µ—Ç—Ä–∏–∫...")

if len(all_distances_raw) > MAX_ROC_PAIRS:
    sample_indices = np.random.choice(len(all_distances_raw), MAX_ROC_PAIRS, replace=False)
    
    all_distances = all_distances_raw[sample_indices]
    true_labels = true_labels_raw[sample_indices]
    print(f"–í—ã–±—Ä–∞–Ω–æ {len(all_distances)} —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–∞—Ä.")
else:
    all_distances = all_distances_raw
    true_labels = true_labels_raw
    print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –º–µ–Ω—å—à–µ MAX_ROC_PAIRS, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å–µ –ø–∞—Ä—ã.")


# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
pos_dists = all_distances[true_labels == 1]
neg_dists = all_distances[true_labels == 0]

print(f"\n‚úÖ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä (–æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫) –≤ –≤—ã–±–æ—Ä–∫–µ: {len(pos_dists)}")
print(f"‚úÖ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä (—Ä–∞–∑–Ω—ã–µ –ª—é–¥–∏) –≤ –≤—ã–±–æ—Ä–∫–µ: {len(neg_dists)}")
print(f"üìå –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π (pos): {pos_dists[:5]}")
print(f"üìå –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π (neg): {neg_dists[:5]}")


# === –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è ===
avg_pos = np.mean(pos_dists) if len(pos_dists) > 0 else 0
avg_neg = np.mean(neg_dists) if len(neg_dists) > 0 else 0

print(f"\nüìä –°—Ä–µ–¥–Ω—è—è –≤–Ω—É—Ç—Ä–∏–∫–ª–∞—Å—Å–æ–≤–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è (–æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫): {avg_pos:.4f}")
print(f"üìä –°—Ä–µ–¥–Ω—è—è –º–µ–∂–∫–ª–∞—Å—Å–æ–≤–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è (—Ä–∞–∑–Ω—ã–µ –ª—é–¥–∏):     {avg_neg:.4f}")

# === Accuracy –ø–æ –ø–æ—Ä–æ–≥—É ===
print("\n–í—ã—á–∏—Å–ª–µ–Ω–∏–µ ROC-–∫—Ä–∏–≤–æ–π –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏...")
start_time_metrics = time.time()

fpr, tpr, thresholds = roc_curve(true_labels, -all_distances)
roc_auc = auc(fpr, tpr)

best_idx = np.argmax(tpr - fpr)
best_threshold = -thresholds[best_idx]

preds = (all_distances <= best_threshold).astype(int)
accuracy = np.mean(preds == true_labels)

end_time_metrics = time.time()
print(f"–ú–µ—Ç—Ä–∏–∫–∏ –≤—ã—á–∏—Å–ª–µ–Ω—ã –∑–∞ {end_time_metrics - start_time_metrics:.2f} —Å–µ–∫—É–Ω–¥.")

print(f"\n‚úÖ Accuracy –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–ø–æ –ª—É—á—à–µ–º—É –ø–æ—Ä–æ–≥—É): {accuracy:.4f}")
print(f"üéØ –õ—É—á—à–∏–π –ø–æ—Ä–æ–≥: {best_threshold:.4f}")
print(f"üî∫ AUC ROC: {roc_auc:.4f}")

# === –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ ROC-–≥—Ä–∞—Ñ–∏–∫–∞ ===
print("\n–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ ROC-–∫—Ä–∏–≤–æ–π...")
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, label=f"AUC = {roc_auc:.4f}")
plt.plot([0, 1], [0, 1], 'k--', label="Random Classifier")
plt.xlabel("False Positive Rate (FPR)")
plt.ylabel("True Positive Rate (TPR)")
plt.title("ROC-–∫—Ä–∏–≤–∞—è –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ª–∏—Ü (–≤—ã–±–æ—Ä–∫–∞)")
plt.legend(loc="lower right")
plt.grid(True)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ —Ñ–∞–π–ª –≤–º–µ—Å—Ç–æ –ø–æ–ø—ã—Ç–∫–∏ –µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
# –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –∏ —Ñ–æ—Ä–º–∞—Ç –ø–æ –∂–µ–ª–∞–Ω–∏—é.
output_roc_path = "roc_curve_evaluation.png"
plt.savefig(output_roc_path)
print(f"ROC-–∫—Ä–∏–≤–∞—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫: {output_roc_path}")

# –£–±–∏—Ä–∞–µ–º plt.show() –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –Ω–µ –Ω—É–∂–Ω–æ –≤ –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥–µ
# –ï—Å–ª–∏ –≤—ã –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–¥ –≤ Jupyter Notebook, –º–æ–∂–µ—Ç–µ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å plt.show()
# plt.show() # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —Ç–µ–ø–µ—Ä—å –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞

print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")